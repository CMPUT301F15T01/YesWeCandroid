// Copyright 2015 Andrea McIntosh, Dylan Ashley, Anju Eappen, Jenna Hatchard, Kirsten Svidal, Raghav Vamaraju
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ca.ualberta.trinkettrader.Inventory.Trinket.Pictures;

import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Observer;

import ca.ualberta.trinkettrader.ElasticStorable;

/**
 * Represents a compressed picture. This is most likely attached to a trinket.
 */
public class Picture extends ElasticStorable implements ca.ualberta.trinkettrader.Observable {

    private transient static final String RESOURCE_URL = "http://cmput301.softwareprocess.es:8080/cmput301f15t01/picture/";
    private transient static final String SEARCH_URL = "http://cmput301.softwareprocess.es:8080/cmput301f15t01/picture/_search";
    private transient static final String TAG = "picture";
    private byte[] pictureByteArray;
    private File file;
    private transient ArrayList<Observer> observers;
    private transient PictureDirectoryManager directoryManager;
    private transient String filename;

    /**
     * Creates a new picture from a file containing a compressed jpeg image.
     *
     * @param picture          file containing the compressed jpeg image
     * @param directoryManager directory manager that can be used to store the picture
     * @throws IOException
     * @throws PackageManager.NameNotFoundException
     */
    public Picture(File picture, PictureDirectoryManager directoryManager) throws IOException, PackageManager.NameNotFoundException {
        this.directoryManager = directoryManager;
        this.file = directoryManager.compressPicture(picture);
        // \u00d3scar L\u00f3pez; http://stackoverflow.com/questions/8721262/how-to-get-file-size-in-java; 2015-11-04
        pictureByteArray = new byte[(int) this.file.length()];
        FileInputStream fileInputStream = new FileInputStream(this.file);
        fileInputStream.read(pictureByteArray);
        fileInputStream.close();
    }


    /**
     * Creates a new picture from a json picture object generated by toJson method of this class.
     *
     * @param filename         filename of the picture stored on the server
     * @param directoryManager directory manager that can be used to store the picture
     * @throws IllegalArgumentException
     * @throws IOException
     * @throws PackageManager.NameNotFoundException
     */
    public Picture(String filename, PictureDirectoryManager directoryManager) throws IllegalArgumentException, IOException, PackageManager.NameNotFoundException {
        this.directoryManager = directoryManager;
        this.filename = filename;
        JsonParser parser = new JsonParser();
        JsonElement element = parser.parse(picture);
        if (!element.isJsonObject()) {
            throw new IllegalArgumentException("not json picture");
        } else {
            JsonObject object = element.getAsJsonObject();
            String filename = object.get("filename").getAsString();
            String stringPictureByteArray = object.get("bytes").getAsString();
            pictureByteArray = stringPictureByteArray.getBytes();
            this.file = directoryManager.compressPicture(filename, pictureByteArray);
        }
    }

    /**
     * Loads this picture into memory so that it can be later viewed.
     */
    public void loadPicture() {
        if (this.file == null) {
            this.
            if (this.filename == null) {
                throw new RuntimeException("filename is null");
            }
        }
    }

    /**
     * Adds the specified observer to the list of observers. If it is already
     * registered, it is not added a second time.
     *
     * @param observer the Observer to add.
     */
    @Override
    public void addObserver(Observer observer) {
        observers.add(observer);
    }

    /**
     * Removes the specified observer from the list of observers. Passing null
     * won't do anything.
     *
     * @param observer the observer to remove.
     */
    @Override
    public synchronized void deleteObserver(Observer observer) {
        observers.remove(observer);
    }

    /**
     * If {@code hasChanged()} returns {@code true}, calls the {@code update()}
     * method for every observer in the list of observers using null as the
     * argument. Afterwards, calls {@code clearChanged()}.
     * <p/>
     * Equivalent to calling {@code notifyObservers(null)}.
     */
    @Override
    public void notifyObservers() {
        for (Observer observer : observers) {
            observer.notify();
        }
    }

    /**
     * Deletes information related to the picture from the device's memory.
     */
    public void delete() {
        this.file.delete();
    }

    /**
     * Returns a bitmap representation of the picture. This should be used
     * anytime the image needs to be displayed.
     *
     * @return bitmap representation of the picture
     */
    public Bitmap getBitmap() {
        return BitmapFactory.decodeByteArray(pictureByteArray, 0, pictureByteArray.length);
    }

    /**
     * Returns the file containing the compressed picture.
     *
     * @return file containing the compressed picture
     */
    public File getFile() {
        return this.file;
    }

    /**
     * Returns the size of the picture in the device's memory.
     *
     * @return size of the picture in the device's memory
     */
    public Long size() {
        return file.length();
    }

    @Override
    public String getResourceUrl() {
        return RESOURCE_URL;
    }

    @Override
    public String getSearchUrl() {
        return SEARCH_URL;
    }

    @Override
    public String getTag() {
        return TAG;
    }

    @Override
    public String getId() {
        return file.getName();
    }
}
